head(boston_scaled)
install.packages("MASS", repos="http://cran.us.r-project.org")
install.packages("MASS", repos = "http://cran.us.r-project.org")
library(MASS)
data("Boston")
install.packages("MASS")
install.packages("MASS")
library(MASS)
data("Boston")
install.packages("corrplot")
n <- nrow(boston_scaled)
n
ind <- sample(n, size = n*0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
str(test)
str(test)
str(train)
dim(test)
dim(train)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
dim(test)
dim(train)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
lda.fit
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
table(correct = correct_classes, predicted = lda.pred$class)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
library(MASS)
data("Boston")
head(Boston)
dim(Boston)
str(Boston)
summary(Boston)
pairs(Boston)
library(tidyr)
library(corrplot)
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits=2)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
library(ggplot)
library(ggplot2)
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
library(tidyr)
library(corrplot)
library(ggplot2)
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits=2)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
bins <- quantile(boston_scaled$crim)
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
head(boston_scaled)
n <- nrow(boston_scaled)
ind <- sample(n, size = n*0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
dim(test)
dim(train)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
correct_classes<-test$crime
test<-dplyr::select(test, -crime)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
table(correct = correct_classes, predicted = lda.pred$class)
table(correct = correct_classes, predicted = lda.pred$class) %>% prop.table() %>% addmargins()
#reloading
data(Boston)
#scale dataset and make data frame
boston_scaled1<-as.data.frame(scale(Boston))
dist_eu <-dist(boston_scaled1)
summary(dist_eu)
km <- kmeans(boston_scaled1, centers = 4)
pairs(Boston[1:6])
pairs(Boston)
set.seed(123)
k_max<- 10
#set the max number of clusters to be ten
k_max<- 10
#calculate total WCSS
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
#calculate total WCSS
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
#visualizing WCSS
qplot(x = 1:k_max, y = twcss, geom = 'line')
km <- kmeans(boston_scaled1, centers = 4)
km <- kmeans(boston_scaled1, centers = 2)
#visualize Kmeans
pairs(boston_scaled1, col = km$cluster)
pair(boston_scaled1[3,7:10, 13], col = km$cluster)
pairs(boston_scaled1[3,7:10, 13], col = km$cluster)
pairs(boston_scaled1[6:10], col = km$cluster)
library(MASS)
data("Boston")
dim(Boston)
str(Boston)
dim(Boston)
str(Boston)
summary(Boston)
pairs(Boston)
library(tidyr)
library(corrplot)
library(ggplot2)
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits=2)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
library(tidyr)
library(corrplot)
library(ggplot2)
library(ggplot2)
library(tidyr)
library(MASS)
data("Boston")
dim(Boston)
str(Boston)
summary(Boston)
library(ggplot2)
library(tidyr)
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
pairs(Boston)
library(corrplot)
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits=2)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
bins <- quantile(boston_scaled$crim)
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
head(boston_scaled)
```{r split}
n <- nrow(boston_scaled)
ind <- sample(n, size = n*0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
dim(test)
dim(train)
cor_matrix %>% round(digits=2)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
cor_matrix %>% round(digits=2)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
correct_classes<-test$crime
test<-dplyr::select(test, -crime)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
#reloading
data(Boston)
#reloading
data(Boston)
#scale dataset and make data frame
boston_scaled1<-as.data.frame(scale(Boston))
dist_eu <-dist(boston_scaled1)
summary(dist_eu)
set.seed(123)
#set the max number of clusters to be ten
k_max<- 10
#calculate total WCSS
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
#visualizing WCSS
qplot(x = 1:k_max, y = twcss, geom = 'line')
km <- kmeans(boston_scaled1, centers = 2)
#visualize Kmeans
pairs(boston_scaled1, col = km$cluster)
pairs(boston_scaled1[6:10], col = km$cluster)
# loading the cvs tables "Human development" and "Gender inequality" into R.
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# Exploring the structures and dimensions.
dim(hd)
str(hd)
summary(hd)
dim(gii)
str(gii)
summary(gii)
# Renaming the variables
colnames(hd)
colnames(hd)[1]<-"HDI.rank"
colnames(hd)[2]<-"Country"
colnames(hd)[3]<-"HDI"
colnames(hd)[4]<-"Life.Exp"
colnames(hd)[5]<-"Edu.Exp"
colnames(hd)[6]<-"mean.edu"
colnames(hd)[7]<-"GNI"
colnames(hd)[8]<-"GNI.rank-HDI.rank"
colnames(hd)
colnames(gii)
colnames(gii)[1]<-"GII.rank"
colnames(gii)[2]<-"Country"
colnames(gii)[3]<-"GII"
colnames(gii)[4]<-"Mat.Mor"
colnames(gii)[5]<-"Ado.Birth"
colnames(gii)[6]<-"Parli.F"
colnames(gii)[7]<-"edu2F"
colnames(gii)[8]<-"edu2M"
colnames(gii)[9]<-"labF"
colnames(gii)[10]<-"labM"
colnames(gii)
#Mutating the "Gender inequality" data in order to create two new variables.
#First accessing the tidyverse package dplyr
library(dplyr)
gii <- mutate(gii, Edu2.FM = gii$edu2F/gii$edu2M)
gii <- mutate(gii, Labo.FM = gii$labF/gii$labM)
colnames(gii)
summary(gii$ratio.edu2)
summary(gii$ratio.lab)
#Joining the two datasets using the variable country as the identifier.
human <- inner_join(hd, gii, by = "Country")
dim(human)
setwd("/Users/eva-mariaroth/Documents/GitHub/IODS-project")
write.table(human, file = "human.csv", sep = ",", col.names = TRUE)
#Part two Data wringling - R Studio exercise numer 5
#Mutating data. Transforming Gross National Income (GNI) variable to numeric, using string manipulation
dim(human)
str(human$GNI)
library(stringr)
GNI2 <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
human <- mutate(human, GNI2)
str(human$GNI2)
dim(human)
colnames(human)
#Selecting certain variables and excluding the rest.
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI2", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep))
#Renaming the column GNI2 (the variable GNI, transformed into numeric) back to GNI
colnames(human)[6]<-"GNI"
colnames(human)
#Removing all the rows with missing values
complete.cases(human)
data.frame(human[-1], comp = complete.cases(human))
human_ <- filter(human, complete.cases(human))
str(human_)
#The last seven observations are not concerning countries, but regions. We want to exclude them from the dataset.
tail(human_, n=10)
last <- nrow(human) -7
human_ <- human [1:155,]
str(human_)
#Defining the row names by the country names and removing the country name column from the data.
rownames(human_) <- human_$Country
str(human_)
human_ <- select(human_, -Country)
str(human_)
#Saving the data
write.table(human, file = "human_.csv")
#Reopening it to see if everything worked out fine.
read.csv("/Users/eva-mariaroth/Documents/GitHub/IODS-project/human_.csv")
#Reopening it to see if everything worked out fine.
test <- read.csv("/Users/eva-mariaroth/Documents/GitHub/IODS-project/human_.csv")
glimpse(test)
str(human_)
#Saving the data
write.table(human, file = "human_.csv", row.names = FALSE)
#Reopening it to see if everything worked out fine.
test <- read.csv("/Users/eva-mariaroth/Documents/GitHub/IODS-project/human_.csv")
glimpse(test)
#Saving the data
write.table(human, file = "human_.csv")
#Reopening it to see if everything worked out fine.
test <- read.csv("/Users/eva-mariaroth/Documents/GitHub/IODS-project/human_.csv", header = TRUE, sep= ",")
glimpse(test)
str(human_)
#Saving the data
write.table(human, file = "human_.csv", sep = ",", row.names = TRUE, col.names = TRUE)
#Reopening it to see if everything worked out fine.
test <- read.csv("/Users/eva-mariaroth/Documents/GitHub/IODS-project/human_.csv", header = TRUE, sep= ",")
glimpse(test)
str(human_)
str(human_)
#Saving the data
write.table(human_, file = "human_.csv", sep = ",", row.names = TRUE, col.names = TRUE)
#Reopening it to see if everything worked out fine.
test <- read.csv("/Users/eva-mariaroth/Documents/GitHub/IODS-project/human_.csv", header = TRUE, sep= ",")
glimpse(test)
human <- read.csv("/Users/eva-mariaroth/Documents/GitHub/IODS-project/human_.csv", header = TRUE, sep= ",")
str(human)
summary(human)
library(ggplot2)
library(tidyr)
gather(human) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
library(GGally)
ggpairs(human)
# loading the cvs tables "Human development" and "Gender inequality" into R.
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# Exploring the structures and dimensions.
dim(hd)
str(hd)
summary(hd)
dim(gii)
str(gii)
summary(gii)
# Renaming the variables
colnames(hd)
colnames(hd)[1]<-"HDI.rank"
colnames(hd)[2]<-"Country"
colnames(hd)[3]<-"HDI"
colnames(hd)[4]<-"Life.Exp"
colnames(hd)[5]<-"Edu.Exp"
colnames(hd)[6]<-"mean.edu"
colnames(hd)[7]<-"GNI"
colnames(hd)[8]<-"GNI.rank-HDI.rank"
colnames(hd)
colnames(gii)
colnames(gii)[1]<-"GII.rank"
colnames(gii)[2]<-"Country"
colnames(gii)[3]<-"GII"
colnames(gii)[4]<-"Mat.Mor"
colnames(gii)[5]<-"Ado.Birth"
colnames(gii)[6]<-"Parli.F"
colnames(gii)[7]<-"edu2F"
colnames(gii)[8]<-"edu2M"
colnames(gii)[9]<-"labF"
colnames(gii)[10]<-"labM"
colnames(gii)
#Mutating the "Gender inequality" data in order to create two new variables.
#First accessing the tidyverse package dplyr
library(dplyr)
gii <- mutate(gii, Edu2.FM = gii$edu2F/gii$edu2M)
gii <- mutate(gii, Labo.FM = gii$labF/gii$labM)
colnames(gii)
summary(gii$ratio.edu2)
summary(gii$ratio.lab)
#Joining the two datasets using the variable country as the identifier.
human <- inner_join(hd, gii, by = "Country")
dim(human)
setwd("/Users/eva-mariaroth/Documents/GitHub/IODS-project")
write.table(human, file = "human.csv", sep = ",", col.names = TRUE)
#Part two Data wringling - R Studio exercise numer 5
#Mutating data. Transforming Gross National Income (GNI) variable to numeric, using string manipulation
dim(human)
str(human$GNI)
library(stringr)
GNI2 <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
human <- mutate(human, GNI2)
str(human$GNI2)
dim(human)
colnames(human)
#Selecting certain variables and excluding the rest.
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI2", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep))
#Renaming the column GNI2 (the variable GNI, transformed into numeric) back to GNI
colnames(human)[6]<-"GNI"
colnames(human)
#Removing all the rows with missing values
complete.cases(human)
data.frame(human[-1], comp = complete.cases(human))
human_ <- filter(human, complete.cases(human))
str(human_)
#The last seven observations are not concerning countries, but regions. We want to exclude them from the dataset.
tail(human_, n=10)
last <- nrow(human) -7
human_ <- human_ [1:155,]
str(human_)
#Defining the row names by the country names and removing the country name column from the data.
rownames(human_) <- human_$Country
str(human_)
human_ <- select(human_, -Country)
str(human_)
#Saving the data
write.table(human_, file = "human_.csv", sep = ",", row.names = TRUE, col.names = TRUE)
#Reopening it to see if everything worked out fine.
test <- read.csv("/Users/eva-mariaroth/Documents/GitHub/IODS-project/human_.csv", header = TRUE, sep= ",")
glimpse(test)
human <- read.csv("/Users/eva-mariaroth/Documents/GitHub/IODS-project/human_.csv", header = TRUE, sep= ",")
str(human)
summary(human)
library(ggplot2)
library(tidyr)
library(GGally)
ggpairs(human)
library(corrplot)
cor_matrix <- cor(human)%>%round(digits=2)
corrplot(cor_matrix, type="upper")
pca_human <- prcomp(human)
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col =c("grey40", "deeppink2"))
human_std <-scale(human)
pca_human <- prcomp(human_std)
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col =c("grey40", "deeppink2"))
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col =c("grey40", "green3"))
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col =c("grey40", "deeppink2"))
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col =c("grey40", "green3"))
biplot(pca_human, choices = 1:2, cex = c(0.5, 1), col =c("grey40", "green3"))
biplot(pca_human, choices = 1:2, cex = c(0.5, 1), col =c("grey40", "green3"))
biplot(pca_human, choices = 1:2, cex = c(0.5, 1), col =c("grey40", "green"))
biplot(pca_human, choices = 1:2, cex = c(0.5, 1), col =c("grey40", "green4"))
biplot(pca_human, choices = 1:2, cex = c(0.5, 1), col =c("grey40", "green4"))
install.packages("FactoMineR")
library("FactoMineR")
data("tea")
str(tea)
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
keep_columns <- c("Tea", "age", "sex", "spirituality", "sophisticated", "exciting", "relaxing", "how", "How", "Tea")
tea_time <- select(tea, one_of(keep_columns))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea)[1:10] %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea[1:10]) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea[1:12]) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea[13:24]) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea[25:36]) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
keep_columns <- c("Tea", "age", "sex", "spirituality", "sophisticated", "exciting", "relaxing", "how", "How", "Tea")
tea_time <- select(tea, one_of(keep_columns))
summary(tea_time)
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
mca <- MCA(tea_time, graph = FALSE)
keep_columns <- c("Tea", "age", "sex", "spirituality", "sophisticated", "exciting", "relaxing", "how", "How", "Tea")
tea_time <- select(tea, one_of(keep_columns))
summary(tea_time)
mca <- MCA(tea_time, graph = FALSE)
mca <- MCA(tea_time, graph = FALSE)
library(ggplot2)
library(tidyr)
library(GGally)
library(tidyr)
library(dplyr)
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
mca <- MCA(tea_time, graph = FALSE)
mca <- MCA(tea_time, graph = FALSE)
library("FactoMineR")
data("tea")
str(tea)
keep_columns <- c("Tea", "age", "sex", "spirituality", "sophisticated", "exciting", "relaxing", "how", "How", "Tea")
tea_time <- select(tea, one_of(keep_columns))
summary(tea_time)
library(dplyr)
mca <- MCA(tea_time, graph = FALSE)
mca <- MCA(tea_time)
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
?ggplot
gather(tea[1:12]) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8), colour="green")
gather(tea[1:12]) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea[1:12]) %>% ggplot(aes(value), colour = "green") + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea[1:12]) %>% ggplot(aes(value), colour = "green3") + facet_wrap("key", scales = "free") + geom_bar()+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea[1:12]) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar(colour = "green4")+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea[13:24]) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar(colour = "green4")+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea[25:36]) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar(colour = "green4")+theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
